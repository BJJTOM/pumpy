╔══════════════════════════════════════════════════════════════╗
║                                                                ║
║   🚀 AWS 완전 배포 가이드 (최신 코드 반영)                    ║
║                                                                ║
╚══════════════════════════════════════════════════════════════╝

📌 현재 상황:
   - 로컬에서 개발 완료 ✅
   - AWS에 최신 코드 미반영 ❌
   - 상품 관리, 매출, 회원 신청 등 새 기능 배포 필요

══════════════════════════════════════════════════════════════

🎯 배포 방법 (2가지 중 선택)

══════════════════════════════════════════════════════════════

┌──────────────────────────────────────────────────────────────┐
│ 방법 1: GitHub 사용 (추천!) ⭐⭐⭐                          │
└──────────────────────────────────────────────────────────────┘

장점: 가장 빠르고 안전함

1️⃣ 로컬에서 GitHub에 푸시
──────────────────────────────────────────────────────────────
PowerShell에서 실행:

cd C:\Users\guddn\Downloads\COCO

git add .
git commit -m "상품관리/매출/회원신청 기능 추가"
git push origin main


2️⃣ AWS에서 Pull 받기
──────────────────────────────────────────────────────────────
AWS 콘솔 → EC2 → 연결 → 터미널에서:

cd /home/ubuntu/pumpy
git pull origin main


3️⃣ 배포 스크립트 실행
──────────────────────────────────────────────────────────────
bash /home/ubuntu/pumpy/fix_cors_aws.sh


┌──────────────────────────────────────────────────────────────┐
│ 방법 2: 직접 파일 업로드 (SSH 없이)                         │
└──────────────────────────────────────────────────────────────┘

1️⃣ 파일 압축 (로컬 PC)
──────────────────────────────────────────────────────────────
PowerShell에서:

cd C:\Users\guddn\Downloads\COCO

# 백엔드 압축
Compress-Archive -Path gym_api\* -DestinationPath gym_api_latest.zip -Force

# 프론트엔드 압축 (node_modules 제외)
Get-ChildItem gym_web -Exclude node_modules,.next | Compress-Archive -DestinationPath gym_web_latest.zip -Force


2️⃣ AWS 콘솔에서 파일 업로드
──────────────────────────────────────────────────────────────
a) AWS 콘솔 → EC2 → 인스턴스 → 연결
b) Actions → Upload File
c) gym_api_latest.zip, gym_web_latest.zip 업로드


3️⃣ AWS 터미널에서 압축 해제 및 배포
──────────────────────────────────────────────────────────────
전체 복사해서 붙여넣기:

cd /home/ubuntu/pumpy

# 백업
tar -czf backup_$(date +%Y%m%d_%H%M%S).tar.gz gym_api gym_web 2>/dev/null || true

# 압축 해제
unzip -o /home/ubuntu/gym_api_latest.zip -d gym_api/
unzip -o /home/ubuntu/gym_web_latest.zip -d gym_web/

# 배포 실행
bash fix_cors_aws.sh


══════════════════════════════════════════════════════════════

📋 완전 자동 배포 스크립트 (AWS 터미널에서 실행)

══════════════════════════════════════════════════════════════

전체 복사해서 AWS 터미널에 붙여넣기:

────────────────────────────────────────────────────────────────
#!/bin/bash
set -e

echo "================================================================"
echo "  🚀 펌피 AWS 완전 배포"
echo "================================================================"
echo ""

cd /home/ubuntu/pumpy

# [1/8] 백업
echo "[1/8] 기존 파일 백업 중..."
tar -czf backup_$(date +%Y%m%d_%H%M%S).tar.gz gym_api gym_web 2>/dev/null || true
echo "    ✅ 백업 완료"

# [2/8] Git Pull (GitHub 사용 시)
echo ""
echo "[2/8] 최신 코드 가져오기..."
if [ -d ".git" ]; then
    git pull origin main 2>/dev/null || echo "Git pull 건너뜀"
else
    echo "    ⚠️  Git 저장소 아님, 수동 업로드 필요"
fi

# [3/8] 백엔드 마이그레이션
echo ""
echo "[3/8] 백엔드 마이그레이션 중..."
cd /home/ubuntu/pumpy/gym_api
source venv/bin/activate || python3 -m venv venv && source venv/bin/activate
pip install -r requirements.txt --quiet
python manage.py makemigrations
python manage.py migrate
python manage.py collectstatic --noinput
echo "    ✅ 마이그레이션 완료"

# [4/8] Gunicorn 재시작
echo ""
echo "[4/8] Gunicorn 재시작 중..."
sudo systemctl restart gunicorn 2>/dev/null || nohup gunicorn --workers 3 --bind 0.0.0.0:8000 config.wsgi:application > /tmp/gunicorn.log 2>&1 &
sleep 2
echo "    ✅ Gunicorn 재시작 완료"

# [5/8] 프론트엔드 의존성 설치
echo ""
echo "[5/8] 프론트엔드 의존성 설치 중..."
cd /home/ubuntu/pumpy/gym_web
npm install
echo "    ✅ 의존성 설치 완료"

# [6/8] 프론트엔드 빌드
echo ""
echo "[6/8] 프론트엔드 빌드 중..."
npm run build
echo "    ✅ 빌드 완료"

# [7/8] PM2 재시작
echo ""
echo "[7/8] PM2 재시작 중..."
pm2 delete gym_web 2>/dev/null || true
pm2 start npm --name "gym_web" -- start
pm2 save
echo "    ✅ PM2 재시작 완료"

# [8/8] 최종 확인
echo ""
echo "[8/8] 서비스 상태 확인..."
echo ""
echo "📊 포트 상태:"
sudo netstat -tlnp | grep -E ':(80|3000|8000)' || echo "포트 확인 필요"
echo ""
echo "📊 PM2 상태:"
pm2 status
echo ""

echo "================================================================"
echo "  ✅ 배포 완료!"
echo "================================================================"
echo ""
echo "🌐 접속 주소:"
echo "   http://3.27.28.175/"
echo ""
echo "🧪 테스트할 페이지:"
echo "   • 대시보드: http://3.27.28.175/"
echo "   • 상품 관리: http://3.27.28.175/plans"
echo "   • 매출 관리: http://3.27.28.175/revenue"
echo "   • 회원 신청: http://3.27.28.175/members/new"
echo "   • 회원 관리: http://3.27.28.175/members"
echo ""
echo "🔍 API 테스트:"
echo "   curl http://localhost/api/members/"
echo "   curl http://localhost/api/plans/"
echo "   curl http://localhost/api/revenue/"
echo ""
echo "================================================================"
────────────────────────────────────────────────────────────────

══════════════════════════════════════════════════════════════

🆘 문제 해결

══════════════════════════════════════════════════════════════

문제 1: Git pull 오류
──────────────────────────────────────────────────────────────
해결: 파일 직접 업로드 방법 사용


문제 2: npm run build 실패
──────────────────────────────────────────────────────────────
해결:
cd /home/ubuntu/pumpy/gym_web
rm -rf node_modules .next
npm install
npm run build


문제 3: Gunicorn 시작 실패
──────────────────────────────────────────────────────────────
해결:
cd /home/ubuntu/pumpy/gym_api
source venv/bin/activate
python manage.py check
sudo journalctl -u gunicorn -n 30


문제 4: 여전히 데이터가 안 보임
──────────────────────────────────────────────────────────────
해결:
1. 브라우저 캐시 완전 삭제 (Ctrl+Shift+Delete)
2. F12 → Console → 오류 확인
3. F12 → Network → /api/ 요청 확인


══════════════════════════════════════════════════════════════

✅ 체크리스트

══════════════════════════════════════════════════════════════

□ 로컬 코드 최신화 완료
□ AWS에 코드 업로드 완료
□ 백엔드 마이그레이션 완료
□ Gunicorn 실행 중
□ 프론트엔드 빌드 완료
□ PM2 실행 중
□ http://3.27.28.175/ 접속 확인
□ 상품 관리 페이지 작동 확인
□ 매출 관리 페이지 작동 확인
□ 회원 신청 페이지 작동 확인

══════════════════════════════════════════════════════════════

작성: 2025-10-21
긴급도: 🔥🔥🔥
예상 시간: 10분








