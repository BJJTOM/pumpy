#!/bin/bash
# ================================================================
# 🚀 펌피 AWS 완전 배포 스크립트
# 모든 최신 기능을 AWS에 배포합니다
# ================================================================

set -e

clear
echo "╔══════════════════════════════════════════════════════════════╗"
echo "║                                                                ║"
echo "║         🚀 펌피(Pumpy) AWS 완전 배포 시작                     ║"
echo "║                                                                ║"
echo "╚══════════════════════════════════════════════════════════════╝"
echo ""
echo "📅 시작 시간: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# 프로젝트 디렉토리
PROJECT_DIR="/home/ubuntu/pumpy"
cd $PROJECT_DIR || { echo "❌ 프로젝트 디렉토리를 찾을 수 없습니다!"; exit 1; }

# ================================================================
# 1. 백업
# ================================================================
echo "════════════════════════════════════════════════════════════════"
echo "  [1/9] 📦 기존 파일 백업"
echo "════════════════════════════════════════════════════════════════"

BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).tar.gz"
if [ -d "gym_api" ] && [ -d "gym_web" ]; then
    tar -czf "$BACKUP_FILE" gym_api gym_web 2>/dev/null && echo "✅ 백업 완료: $BACKUP_FILE" || echo "⚠️  백업 건너뜀"
else
    echo "⚠️  백업할 디렉토리가 없습니다"
fi

# ================================================================
# 2. 최신 코드 가져오기
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [2/9] 📥 최신 코드 가져오기"
echo "════════════════════════════════════════════════════════════════"

if [ -d ".git" ]; then
    echo "Git 저장소 감지, Pull 시도 중..."
    git pull origin main 2>/dev/null && echo "✅ Git pull 성공" || echo "⚠️  Git pull 실패, 수동 업로드 필요"
else
    echo "⚠️  Git 저장소 아님"
    echo "💡 파일을 수동으로 업로드했다면 계속 진행됩니다"
fi

# ================================================================
# 3. 백엔드 환경 설정
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [3/9] 🐍 백엔드 환경 설정"
echo "════════════════════════════════════════════════════════════════"

cd $PROJECT_DIR/gym_api

# 가상환경 확인/생성
if [ ! -d "venv" ]; then
    echo "가상환경 생성 중..."
    python3 -m venv venv
fi

# 가상환경 활성화
source venv/bin/activate
echo "✅ 가상환경 활성화"

# 의존성 설치
echo "패키지 설치 중..."
pip install --upgrade pip --quiet
pip install -r requirements.txt --quiet
echo "✅ 패키지 설치 완료"

# ================================================================
# 4. 데이터베이스 마이그레이션
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [4/9] 🗃️  데이터베이스 마이그레이션"
echo "════════════════════════════════════════════════════════════════"

python manage.py makemigrations
python manage.py migrate
echo "✅ 마이그레이션 완료"

# ================================================================
# 5. Static 파일 수집
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [5/9] 📁 Static 파일 수집"
echo "════════════════════════════════════════════════════════════════"

python manage.py collectstatic --noinput
echo "✅ Static 파일 수집 완료"

# ================================================================
# 6. Gunicorn 재시작
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [6/9] 🔄 Gunicorn 재시작"
echo "════════════════════════════════════════════════════════════════"

if sudo systemctl restart gunicorn 2>/dev/null; then
    echo "✅ Gunicorn systemd 재시작 성공"
    sleep 2
    if sudo systemctl is-active --quiet gunicorn; then
        echo "✅ Gunicorn 실행 중"
    else
        echo "⚠️  Gunicorn 상태 확인 필요"
    fi
else
    echo "⚠️  systemd 서비스 없음, 직접 실행..."
    sudo fuser -k 8000/tcp 2>/dev/null || true
    nohup $PROJECT_DIR/gym_api/venv/bin/gunicorn \
        --workers 3 \
        --bind 0.0.0.0:8000 \
        --chdir $PROJECT_DIR/gym_api \
        config.wsgi:application \
        > /tmp/gunicorn.log 2>&1 &
    sleep 2
    echo "✅ Gunicorn 직접 실행 완료"
fi

# 포트 확인
if sudo netstat -tlnp | grep -q ':8000'; then
    echo "✅ 포트 8000 리스닝 중"
else
    echo "❌ 포트 8000이 열리지 않았습니다!"
    echo "로그 확인: tail -f /tmp/gunicorn.log"
fi

# ================================================================
# 7. 프론트엔드 의존성 설치
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [7/9] 📦 프론트엔드 의존성 설치"
echo "════════════════════════════════════════════════════════════════"

cd $PROJECT_DIR/gym_web

npm install
echo "✅ NPM 패키지 설치 완료"

# ================================================================
# 8. 프론트엔드 빌드
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [8/9] 🔨 프론트엔드 빌드"
echo "════════════════════════════════════════════════════════════════"

# 기존 빌드 삭제
rm -rf .next out 2>/dev/null || true

# 빌드 실행
npm run build
echo "✅ Next.js 빌드 완료"

# ================================================================
# 9. PM2 재시작
# ================================================================
echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  [9/9] 🔄 PM2 재시작"
echo "════════════════════════════════════════════════════════════════"

# 기존 프로세스 삭제
pm2 delete gym_web 2>/dev/null || true
sleep 1

# 새로 시작
pm2 start npm --name "gym_web" -- start
pm2 save
echo "✅ PM2 재시작 완료"

# 포트 확인
sleep 2
if sudo netstat -tlnp | grep -q ':3000'; then
    echo "✅ 포트 3000 리스닝 중"
else
    echo "⚠️  포트 3000 확인 필요"
    echo "로그 확인: pm2 logs gym_web"
fi

# ================================================================
# 최종 상태 확인
# ================================================================
echo ""
echo "╔══════════════════════════════════════════════════════════════╗"
echo "║                                                                ║"
echo "║              ✅ 배포 완료!                                    ║"
echo "║                                                                ║"
echo "╚══════════════════════════════════════════════════════════════╝"
echo ""

echo "📊 서비스 상태 확인"
echo "────────────────────────────────────────────────────────────────"
echo ""

echo "🔌 포트 리스닝:"
sudo netstat -tlnp | grep -E ':(80|3000|8000)' || echo "⚠️  포트 확인 필요"

echo ""
echo "🔥 Gunicorn 상태:"
if sudo systemctl is-active --quiet gunicorn 2>/dev/null; then
    echo "✅ Gunicorn: 실행 중"
else
    if sudo netstat -tlnp | grep -q ':8000'; then
        echo "✅ Gunicorn: 수동 실행 중"
    else
        echo "❌ Gunicorn: 실행되지 않음"
    fi
fi

echo ""
echo "🌐 PM2 상태:"
pm2 status

echo ""
echo "════════════════════════════════════════════════════════════════"
echo "  🌐 접속 주소"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "   메인:      http://3.27.28.175/"
echo "   API:       http://3.27.28.175/api/"
echo "   관리자:    http://3.27.28.175/admin/"
echo ""

echo "════════════════════════════════════════════════════════════════"
echo "  🧪 기능 테스트"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "   대시보드:    http://3.27.28.175/"
echo "   회원 관리:   http://3.27.28.175/members"
echo "   회원 신청:   http://3.27.28.175/members/new"
echo "   상품 관리:   http://3.27.28.175/plans"
echo "   매출 관리:   http://3.27.28.175/revenue"
echo "   승인 대기:   http://3.27.28.175/pending"
echo ""

echo "════════════════════════════════════════════════════════════════"
echo "  🔍 문제 해결"
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "로그 확인:"
echo "  • Django:  sudo journalctl -u gunicorn -n 50"
echo "  • Django:  tail -f /tmp/gunicorn.log"
echo "  • Next.js: pm2 logs gym_web"
echo ""
echo "서비스 재시작:"
echo "  • Django:  sudo systemctl restart gunicorn"
echo "  • Next.js: pm2 restart gym_web"
echo ""
echo "════════════════════════════════════════════════════════════════"
echo ""
echo "📅 완료 시간: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""
echo "🎉 브라우저에서 http://3.27.28.175/ 를 열어보세요!"
echo ""





